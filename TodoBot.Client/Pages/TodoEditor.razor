@inject ILiffClient Liff
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject IUriHelper UriHelper

<div style="max-width:20rem;">
    <div class="form-group">
        <label for="title">タイトル</label>
        <input type="text" name="title" class="form-control" @bind="Todo.Title" />
    </div>
    <div class="form-group">
        <label for="content">詳細</label>
        <textarea class="form-control" name="content" @bind="Todo.Content" />
    </div>
    <div class="form-group">
        <label for="status">状況</label>
        <select class="form-control" name="status" @bind="Todo.Status">
            <option value="@Status.Ready">@Status.Ready.ToString()</option>
            <option value="@Status.Doing">@Status.Doing.ToString()</option>
            <option value="@Status.Done">@Status.Done.ToString()</option>
            <option value="@Status.Canceled">@Status.Canceled.ToString()</option>
        </select>
    </div>
    <div class="form-group">
        <label for="dueDate">期日</label>
        <input type="date" class="form-control" name="dueDate" @bind="Todo.DueDate" @bind:format="yyyy-MM-dd" />
    </div>
    <button class="form-control btn btn-primary" @onclick="OnButtonClickAsync">@ButtonName</button>
</div>
<Alert Message="@ErrorMessage" AlertType="danger"></Alert>    

@code{
    [Parameter]
    Todo Todo { get; set; }

    [Parameter]
    string ButtonName { get; set; }

    [Parameter]
    Func<Todo,Task> ButtonClickAsync { get; set; }

    string ErrorMessage;

    async Task OnButtonClickAsync()
    {
        ErrorMessage = null;
        try
        {
            await ButtonClickAsync?.Invoke(Todo);
            UriHelper.NavigateTo($"{UriHelper.GetBaseUri()}");
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }
}